<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Abbas Arezoo - Designer and Developer</title>
    <description>Hello there, I&#39;m Abbas. I design and build websites and applications.</description>
    <link>http://www.abbasarezoo.com/</link>
    <atom:link href="http://www.abbasarezoo.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 11 Oct 2016 17:20:22 +0100</pubDate>
    <lastBuildDate>Tue, 11 Oct 2016 17:20:22 +0100</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Have you got a sec?</title>
        <description>&lt;p&gt;INTRO&lt;/p&gt;

&lt;p&gt;Have you got a sec? Can I borrow you for a sec? I must ask these questions so many times during on a normal day. Followed by a question about Javascript or PHP or why I can’t do something with Git.&lt;/p&gt;

&lt;p&gt;SELF-TAUGHT&lt;/p&gt;

&lt;p&gt;A few years ago had a chat with a director at a successful design agency. The conversation circled around the idea that a web designer couldn’t do everything. He rightly proposed the concept that a web designer should at least have a working knowledge of HTML and CSS. But, in order for the designer to be truly creative, they should be free of the constraints scripting and programming, meaning no need to write Javascript or back-end code. I agreed. However, when web design became my actual job I found out we were both wrong.&lt;/p&gt;

&lt;p&gt;In my early years at Vivid. Sites were going live looking and functioning differently to how I’d designed them. Because we traditionally worked in silos, there was no collaboration and designs were handed off and that was that. I needed even more creative control, so before we began to design sites I began to ask questions. Which almost always began with the classic “have you got a sec?”.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What plugin are we using for this module? Are there any others that give us more creative control?&lt;/li&gt;
  &lt;li&gt;If something looks markedly different to the designs can you flag it as soon as possible?&lt;/li&gt;
  &lt;li&gt;I want this to happen when a user clicks that, is this possible? Shall I write it?&lt;/li&gt;
  &lt;li&gt;I’ve tried to do this, but it’s not quite working, could you take a look?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not only did asking questions make the team collaborate more,  I also began to influence the final output a lot more. Ultimately, I learned a hell of a lot on the way.&lt;/p&gt;

&lt;p&gt;The common thread that links all of this are questions like “have you got a sec?”. I’ve learned some much from little five minute chats, mini tutorials and ad-hoc hack sessions that I can  build a pretty good CMS, from design to deployment.&lt;/p&gt;

&lt;p&gt;So I would now completely disagree with my friends assumption.&lt;/p&gt;

</description>
        <pubDate>Sun, 09 Oct 2016 09:29:49 +0100</pubDate>
        <link>http://www.abbasarezoo.com/thoughts/2016/10/09/have-you-got-a-sec.html</link>
        <guid isPermaLink="true">http://www.abbasarezoo.com/thoughts/2016/10/09/have-you-got-a-sec.html</guid>
        
        
        <category>Thoughts</category>
        
      </item>
    
      <item>
        <title>Four tips for aspiring designers and developers</title>
        <description>&lt;p&gt;Getting a gig in the creative industry is tough. It’s a crowded market with employers looking for multi-disciplined creatives, so standing out from the crowd can be difficult. At &lt;a href=&quot;http://www.vividcreative.com/&quot;&gt;Vivid&lt;/a&gt;, we actively encourage applications and enquiries from students, graduates and developers who are new to the industry. So if that’s you, here’s a few tips on how to get your foot in the door.&lt;/p&gt;

&lt;h2 id=&quot;get-some-kit&quot;&gt;1. Get some kit&lt;/h2&gt;

&lt;p&gt;Having your own hardware is a great idea. If it’s a laptop, even better, as you might need to take it with you to meetings, presentations and interviews.&lt;/p&gt;

&lt;p&gt;If you’re doing freelance work for an agency or an in-house team, it’s highly likely that a machine will be available for you. But being able bring your own gear will definitely open up a few doors at smaller agencies and businesses.&lt;/p&gt;

&lt;h3 id=&quot;think-different&quot;&gt;Think different&lt;/h3&gt;

&lt;p&gt;If you’re new to the game, money might be tight. It’s down to you be intelligent about your budget. For a quarter of the price of a MacBook, you could get a very powerful Windows machine.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Designing and developing on a PC is no different to working on a Mac. Yes, there was a time when Macs were more suited for designers, but those days are long gone.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The gap between the price of Apple hardware and the alternatives is well documented. The difference could leave you plenty of budget for other important things like software, wireless peripherals, business cards, travel and booze (optional).&lt;/p&gt;

&lt;h3 id=&quot;meeting-the-standard&quot;&gt;Meeting the standard&lt;/h3&gt;

&lt;p&gt;You &lt;em&gt;must&lt;/em&gt; have access to industry standard software. If you’re developer, you’re lucky, most code editors are reasonably priced and some like &lt;a href=&quot;https://atom.io/&quot;&gt;GitHub’s Atom editor&lt;/a&gt; are free.&lt;/p&gt;

&lt;p&gt;Designers: a subscription to Adobe Creative Cloud is essential to your future career in the industry, and this means spending some cash. A full subscription may not be necessary so it’s worth exploring the options available to you. And don’t forget, if you’re still in college or University you can take advantage of Adobe’s favourable discounted packages.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Top tip: you could grab older versions of Adobe Creative Suite from eBay for a reasonable price if you cannot stomach the monthly subscription fee for Creative Cloud.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;develop-an-online-presence&quot;&gt;2. Develop an online presence&lt;/h2&gt;

&lt;p&gt;It’s essential to get yourself and your work online, this is where we go to first when we receive applications. Getting online may require a small investment on your part and may seem a little daunting, but if it gets you a job it’s be worth it.&lt;/p&gt;

&lt;h3 id=&quot;small-investments-large-payoffs&quot;&gt;Small investments, large payoffs&lt;/h3&gt;

&lt;p&gt;Paid-for services like &lt;a href=&quot;https://www.squarespace.com/&quot;&gt;Squarespace&lt;/a&gt; and &lt;a href=&quot;http://www.wix.com/&quot;&gt;Wix&lt;/a&gt; can make the whole process a breeze if you’ve never written a line of code before. If you are a developer, you should absolutely develop your own site. We will see it as a weak spot if you didn’t. We will be looking at your source code so keep it clean.&lt;/p&gt;

&lt;p&gt;It also helps to have your own professional email address. Your email address and your phone number are your two main points of contact. You can’t easily choose a nice looking phone number, but you can control the look of your email address.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An email address like topbantz69@gmail.com might have felt like a good idea at the time, but it isn’t a great look when applying for jobs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;shout-it-from-the-rooftops&quot;&gt;Shout it from the rooftops&lt;/h3&gt;

&lt;p&gt;There are a ton of free ways to promote yourself online beyond your own website. Here’s a few for ideas:&lt;/p&gt;

&lt;h4 id=&quot;designers&quot;&gt;Designers:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Post your work on &lt;a href=&quot;https://www.behance.net/&quot;&gt;Behance&lt;/a&gt;, &lt;a href=&quot;https://www.tumblr.com/&quot;&gt;Tumblr&lt;/a&gt;, &lt;a href=&quot;https://dribbble.com/&quot;&gt;Dribbble&lt;/a&gt; and &lt;a href=&quot;https://www.pinterest.com&quot;&gt;Pinterest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Share your work with friends on Facebook&lt;/li&gt;
  &lt;li&gt;Create a PDF version of your portfolio and keep the file size low enough to email&lt;/li&gt;
  &lt;li&gt;Email your PDF portfolio along with all the links to your work to local agencies and companies&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;developers&quot;&gt;Developers:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Create prototypes and experiments on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Create public &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; repo where we can see your work&lt;/li&gt;
  &lt;li&gt;Contribute to the web community on sites like &lt;a href=&quot;http://stackoverflow.com/&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Fork existing projects and try and improve them&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;everybody&quot;&gt;Everybody:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Follow and interact with industry experts on Twitter&lt;/li&gt;
  &lt;li&gt;Leave constructive comments on articles and blog posts&lt;/li&gt;
  &lt;li&gt;Don’t be insulting - content you add to websites can be indexed on Google&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;brand-yourself&quot;&gt;3. Brand yourself&lt;/h2&gt;

&lt;p&gt;How you look is going to make an impression with clients and employers, good or bad.&lt;/p&gt;

&lt;p&gt;If you’ve followed step #2 you will know it’s a good idea to come up with some brand assets for yourself. Paying careful attention to your public facing content and any correspondence you send to potential clients and employers is absolutely key.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Don’t forget, successfully branding yourself should be considered as a portfolio piece. You should be able to talk confidently about why and how you have branded yourself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;things-to-think-about&quot;&gt;Things to think about:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Create a digital letterhead: Great for sending covering letters and proposals via emails&lt;/li&gt;
  &lt;li&gt;Build an email signature: Keep it simple, your name, logo, website and social media links will do&lt;/li&gt;
  &lt;li&gt;Be consistent - keep fonts, icons, colours, image treatments and typography consistent across all media&lt;/li&gt;
  &lt;li&gt;Think about investing in a webfont licence from somewhere like Typekit or fonts.com&lt;/li&gt;
  &lt;li&gt;Google fonts are everywhere, going the extra mile for something more considered will get you noticed&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;focus-on-your-strengths&quot;&gt;4. Focus on your strengths&lt;/h2&gt;

&lt;p&gt;Job descriptions can be daunting and comprehensive. Having written a couple myself, it’s tempting to target the perfect multi-disciplined designer who can do everything.&lt;/p&gt;

&lt;p&gt;Agencies tend to fill up a job description with every skill in the book, but that’s not the reality in agency life.&lt;/p&gt;

&lt;h3 id=&quot;specialise-and-become-an-expert&quot;&gt;Specialise and become an expert&lt;/h3&gt;

&lt;p&gt;If you’ve studied computer science and are looking for a career in Ruby development then focus on that. Don’t waste your time trying to level up your CSS skills. If you’re obsessed with print, inks, paper stocks and Pantone swatches then stay in that world. There will be time to develop your skill set as your career progresses, try not the be everything to everybody just yet.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you promote yourself as an all-knowing hero we will question you on it so be ready.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;document-it-or-it-never-happened&quot;&gt;Document it, or it never happened&lt;/h3&gt;

&lt;p&gt;Documenting your learning and working experiences will help you become better at what you do.&lt;/p&gt;

&lt;p&gt;Being able to describe what you do in a clear and confident manner will make you more attractive to potential employers. There are a few ways you can do this, be it posting informative tweets, writing blog posts or creating interesting code examples on Codepen or Github. And remember, the more content you post online, the easier it will be for potential employers to find you.&lt;/p&gt;

&lt;h2 id=&quot;bonus-tip-love-what-you-do&quot;&gt;Bonus tip: love what you do&lt;/h2&gt;

&lt;p&gt;We’re looking for somebody who wants a career in the industry, not just a job. You should love what you do and this should come through in your work, how your present yourself and your personality. Good luck!&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jul 2016 09:29:49 +0100</pubDate>
        <link>http://www.abbasarezoo.com/advice/2016/07/03/four-tips-for-students-young-designers.html</link>
        <guid isPermaLink="true">http://www.abbasarezoo.com/advice/2016/07/03/four-tips-for-students-young-designers.html</guid>
        
        
        <category>Advice</category>
        
      </item>
    
      <item>
        <title>Using Grunt with a front-end project for the first time</title>
        <description>&lt;h2 id=&quot;before-we-start&quot;&gt;Before we start&lt;/h2&gt;

&lt;p&gt;Grunt is a command line tool that requires you to use a few simple commands. If you’re unfamiliar using the command line, getting to grips with Grunt is a nice introduction for beginners. For this guide, you’ll need a code editor and a command line application. I’ll be using Terminal (Mac) during this guide.&lt;/p&gt;

&lt;p&gt;Having a working knowledge of front-end development is a must. I’ve you’ve never written a line of HTML or CSS in anger before then you probably won’t benefit from this guide. It is also assumed that you’re familiar with Git and have used Github before.&lt;/p&gt;

&lt;h2 id=&quot;what-is-grunt&quot;&gt;What is Grunt?&lt;/h2&gt;

&lt;p&gt;Grunt is a ‘task runner’ which has thousands of plugins that can be used to automate almost any task. There are other task runners available that may serve your needs better but I won’t be getting into the pros and cons of the alternatives in this guide.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The fact is: using any task runner will dramatically increase the speed of your development.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;setting-up&quot;&gt;Setting up&lt;/h3&gt;

&lt;p&gt;If you’ve never used Grunt before you will need to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Install &lt;a href=&quot;http://gruntjs.com/getting-started&quot;&gt;Grunt’s command line interface&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you’re all setup, we can &lt;a href=&quot;https://github.com/abbasarezoo/grunt-boilerplate/&quot;&gt;fork the boilerplate&lt;/a&gt; and start getting to know Grunt.&lt;/p&gt;

&lt;h2 id=&quot;getting-some-plugins&quot;&gt;Getting some plugins&lt;/h2&gt;

&lt;p&gt;All of the plugins that we’re going to use will be stored in a directory named &lt;em&gt;node_modules&lt;/em&gt;. But, you may have noticed there is no such directory in the repo you forked. In all Grunt projects, a &lt;em&gt;node_modules&lt;/em&gt; will include thousands of files, I don’t see the point in pushing these files to a remote repo.&lt;/p&gt;

&lt;h3 id=&quot;npm-install&quot;&gt;npm-install&lt;/h3&gt;

&lt;p&gt;You will also see a &lt;em&gt;package.json&lt;/em&gt; file which contains the name of the project and a list of plugins we will be using. If you’re &lt;em&gt;package.json&lt;/em&gt; file has a pre-populated list of plugins (like in this guide) you can simply run the command &lt;code class=&quot;highlighter-rouge&quot;&gt;$ npm install&lt;/code&gt; to download them to your local environment. Running this command creates the &lt;em&gt;node_modules&lt;/em&gt; directory locally and the directories for each plugin within.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Any additional plugins you add to your project will update this file so you can leave this file alone from now on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once we have the plugins we’re ready to look at our Gruntfile and configure some tasks.&lt;/p&gt;

&lt;h2 id=&quot;getting-to-know-your-gruntfile&quot;&gt;Getting to know your Gruntfile&lt;/h2&gt;

&lt;p&gt;Each Grunt project has a Gruntfile. This is a configuration file where our tasks are setup. The file should and will always be named &lt;em&gt;Gruntfile.js&lt;/em&gt; otherwise Grunt will error when your try to run a task.&lt;/p&gt;

&lt;p&gt;Open up the file and take a look at the basic setup. In our file plugins are loaded at the top, tasks configured in the middle and registered at the bottom.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module.exports = function(grunt) {

// LOAD EACH PLUGIN

grunt.loadNpmTasks(&#39;grunt-sass&#39;);

// TASK CONFIGURATION

grunt.initConfig({
  pkg: grunt.file.readJSON(&#39;package.son&#39;),

    sass: {

      options: {
        sourceMap: false
      },

      dist: {
        files: {
          ‘build/style.css&#39;: &#39;_css-src/style.scss&#39;
        }
      }

    },

});

// REGISTER EACH TASK

grunt.registerTask(&#39;css&#39;, [sass]);

};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;interpreting-a-task&quot;&gt;Interpreting a task&lt;/h3&gt;

&lt;p&gt;Most tasks share similar characteristics with slight variations depending on how the plugin was developed.&lt;/p&gt;

&lt;p&gt;Each task tends to have it’s own Github repo where you can explore how the task works and setup, &lt;a href=&quot;https://github.com/gruntjs/grunt-contrib-uglify&quot;&gt;here’s one&lt;/a&gt;. I would recommend taking a look at the &lt;em&gt;README.md&lt;/em&gt; of each plugin to get a feel for each one should be used.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Running tasks, editing tasks, breaking tasks and fixing them will serve you well in your Grunt-based future.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;heres-an-example-image-optimisation-task&quot;&gt;Here’s an example image optimisation task:&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;imagemin: {
    optimise: {
        files: [{
            expand: true,
            cwd: &#39;_img-src&#39;,
            src: [&#39;*.{png,jpg,gif,svg}&#39;],
            dest: &#39;build/images&#39;
        }]
     }
},
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;This task as one target: &lt;code class=&quot;highlighter-rouge&quot;&gt;optimise&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;This looks through the current working directory (&lt;code class=&quot;highlighter-rouge&quot;&gt;cwd&lt;/code&gt;), where our uncompressed images are saved.&lt;/li&gt;
  &lt;li&gt;It then looks for source files (&lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt;) to optimise. Note in this example we’re using a wildcard (&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;) to tell the plugin to target all files in our current working directory with the file extensions of &lt;em&gt;.png&lt;/em&gt;, &lt;em&gt;.jpg&lt;/em&gt;, &lt;em&gt;.gif&lt;/em&gt; and &lt;em&gt;.svg&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;It then makes new versions of all the optimised images in the &lt;em&gt;build/images&lt;/em&gt; directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;another-task-example-with-a-different-structure-this-time-compiling-sass&quot;&gt;Another task example with a different structure, this time compiling Sass:&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sass: {
    options: {
        sourceMap: false
    },
    dist: {
        files: {
            ‘build/style.css&#39;: &#39;_css-src/style.scss&#39;
        }
    }
},
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;This task is setup a little differently, with two targets &lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt; target creates a source map for the compiled CSS file (really handy). This option is currently set to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; which means no source map will be generated.&lt;/li&gt;
  &lt;li&gt;The second target of this task dictates where the compiled CSS will be generated to, and from which directory it is created from.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;running-tasks&quot;&gt;Running tasks&lt;/h2&gt;

&lt;p&gt;Now you’ve got to know Grunt it’s time to head back to Terminal and start writing some commands.&lt;/p&gt;

&lt;h3 id=&quot;tasks-included-with-this-boilerplate&quot;&gt;Tasks included with this boilerplate&lt;/h3&gt;

&lt;h4 id=&quot;compile-css&quot;&gt;Compile CSS&lt;/h4&gt;

&lt;p&gt;Task name: &lt;em&gt;&lt;a href=&quot;https://github.com/sindresorhus/grunt-sass&quot;&gt;grunt-sass&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Command: &lt;code class=&quot;highlighter-rouge&quot;&gt;$ grunt css&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Compiles Sass files inside the &lt;em&gt;_css-src&lt;/em&gt; directory to CSS files&lt;/li&gt;
  &lt;li&gt;Adds in vendor prefixes and minify CSS using posts&lt;/li&gt;
  &lt;li&gt;Compiles the resulting CSS files to a specific directory&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;compile-html&quot;&gt;Compile HTML&lt;/h4&gt;

&lt;p&gt;Task name: &lt;em&gt;&lt;a href=&quot;https://github.com/fatso83/grunt-codekit&quot;&gt;grunt-codekit&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Command: &lt;code class=&quot;highlighter-rouge&quot;&gt;$ grunt html&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Compiles multiple HTML files inside the &lt;em&gt;_html-src&lt;/em&gt; directory into &lt;em&gt;.kit&lt;/em&gt; files&lt;/li&gt;
  &lt;li&gt;Converts &lt;em&gt;.kit&lt;/em&gt; files to &lt;em&gt;.html&lt;/em&gt; files and moves them to a specific directory&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;concatenate-javascript&quot;&gt;Concatenate Javascript&lt;/h4&gt;

&lt;p&gt;Task name: &lt;em&gt;&lt;a href=&quot;https://github.com/gruntjs/grunt-contrib-uglify&quot;&gt;grunt-contrib-uglify&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Command: &lt;code class=&quot;highlighter-rouge&quot;&gt;$ grunt js&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Concatenates multiple Javascript files inside the &lt;em&gt;_js-src&lt;/em&gt; directory into a single minified file&lt;/li&gt;
  &lt;li&gt;Moves the resulting JS file to a specific directory&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;optimise-images&quot;&gt;Optimise images&lt;/h4&gt;

&lt;p&gt;Task name: &lt;em&gt;&lt;a href=&quot;https://github.com/gruntjs/grunt-contrib-imagemin&quot;&gt;grunt-contrib-imagemin&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Command &lt;code class=&quot;highlighter-rouge&quot;&gt;$ grunt img&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Optimises all images inside the &lt;em&gt;_img-src&lt;/em&gt; directory&lt;/li&gt;
  &lt;li&gt;Moves the optimised images to a specific directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you have the ability to run individual tasks your development time will be noticeably quicker. But we can take our newly found knowledge of Grunt a step further.&lt;/p&gt;

&lt;h2 id=&quot;automate-the-automation&quot;&gt;Automate the automation&lt;/h2&gt;

&lt;p&gt;Using Terminal to run individual tasks is a great way to learn Grunt, but this isn’t an efficient way of working on a live project. We can take our automation to the next level and we can do this using the &lt;em&gt;grunt-watch&lt;/em&gt; task.&lt;/p&gt;

&lt;p&gt;This task watches a directory and runs specified sub-tasks when additions and changes are made to files within that directory.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The great thing about &lt;em&gt;grunt-watch&lt;/em&gt; is you can run the command once and leave it to work its magic in the background while you go about your work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;heres-an-example-grunt-watch-task&quot;&gt;Here’s an example grunt-watch task:&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;watch: {
    css: {
        files: [&#39;_css-src/**/*.scss&#39;],
        tasks: [&#39;css&#39;],
            options: {
                spawn: false,
                livereload:35729,
                event: [&#39;added&#39;, &#39;changed&#39;]
            },
    },
},
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;In this example there is a sub-task called &lt;code class=&quot;highlighter-rouge&quot;&gt;css&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;This sub-task watches the &lt;em&gt;_css-src&lt;/em&gt; directory and all files within with the file extension &lt;em&gt;.scss&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;If you refer to the area in the Gruntfile where tasks are registered you’ll see&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will notice in our Gruntfile a number of sub-tasks within our &lt;em&gt;watch&lt;/em&gt; task. Take some time to familiarise yourself with how sub-tasks are written and how they link with other tasks in the same Gruntfile.&lt;/p&gt;

&lt;p&gt;To run the &lt;em&gt;watch&lt;/em&gt; task simply run &lt;code class=&quot;highlighter-rouge&quot;&gt;$ grunt watch&lt;/code&gt; and you’re good to go.&lt;/p&gt;

&lt;h2 id=&quot;finishing-up&quot;&gt;Finishing up&lt;/h2&gt;

&lt;p&gt;While this guide is a super-simple introduction to Grunt, it is a great jumping off point for bigger and better things. My advice would be to get to grips with some basic tasks first, then start experimenting with some of the more complex tasks once you’re comfortable.&lt;/p&gt;

&lt;p&gt;But using the simpler tasks that we have used in this guide should make your life a whole lot better.&lt;/p&gt;

&lt;h2 id=&quot;handy-links&quot;&gt;Handy links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/abbasarezoo/grunt-boilerplate/&quot;&gt;The Grunt boilerplate&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gruntjs.com/&quot;&gt;Official Grunt website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://24ways.org/2013/grunt-is-not-weird-and-hard/&quot;&gt;Chris Coyier’s article on Grunt is excellent&lt;/a&gt;. This is where I started learning Grunt, recommended reading.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 21 Jun 2016 09:29:49 +0100</pubDate>
        <link>http://www.abbasarezoo.com/skills/2016/06/21/using-grunt-for-the-first-time.html</link>
        <guid isPermaLink="true">http://www.abbasarezoo.com/skills/2016/06/21/using-grunt-for-the-first-time.html</guid>
        
        
        <category>Skills</category>
        
      </item>
    
      <item>
        <title>Web design isn&#39;t dead, but the term is dying</title>
        <description>&lt;p&gt;When I first started designing websites, you designed and built a website and that was that. There was little thought for SEO, performance and mobile user experience. Smartphones didn’t exist. Getting online with the phones that could access the web was excruciating. Responsive web design was a long way off and big social media was in its infancy. Advances in technology allow us to solve these challenges with digital strategy, of which digital design is a part of.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.vividcreative.com/wp-content/uploads/2015/07/uos-cs4-2.jpg&quot; alt=&quot;Picture of post-it notes outlining the group of challenges that cannot be solved by design alone&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We now have a whole group of challenges that cannot be solved with design alone.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Grabbing a $50 template will get you a website, but code and images alone won’t get you over the line. Clients need the flexibility of a custom built digital product that suits their objectives, customers and content.&lt;/p&gt;

&lt;p&gt;Designers obsess over tools and scripts to make their lives easier. Over the last year we have integrated Grunt into our workflow. Grunt is great at handling a whole host of monotonous tasks. This is where automation comes into its own. Our designers and developers now have more time to refine their work knowing time isn’t against them. An average designer will sit and compress a bunch of images by hand in Photoshop. A good one gets Grunt task to do this for them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.vividcreative.com/wp-content/uploads/2015/07/automation-tools.jpg&quot; alt=&quot;Picture of popular task automation tools&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Automation tools are great. But not the only answer.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Automation isn’t contributing to web design’s downfall. We limit how much automated tools encroach on our workflow. Telling your client the website looks and acts the way it does because you let the automated web builder do the hard work might not go down too well. Unless specified early in the project, clients want a personal touch. We also like clients to have an input into how what the digital product looks like. It’s a great way to keep the client involved and engaged with the project. Strategy, rather than automated tools, inform the visual look and functionality of digital products.&lt;/p&gt;

&lt;p&gt;The art of designing a website is far from dead. But the term is dying. We like to think of it as digital design, that acts as part of a the wider digital strategy. We cannot use the term web design to describe the vast range of skills needed to create a successful website.&lt;/p&gt;

&lt;p&gt;A website isn’t just pages of code and images rendered in a browser, there’s a lot more to it than that baby.&lt;/p&gt;
</description>
        <pubDate>Wed, 18 May 2016 21:29:49 +0100</pubDate>
        <link>http://www.abbasarezoo.com/thoughts/2016/05/18/web-design-isnt-dying.html</link>
        <guid isPermaLink="true">http://www.abbasarezoo.com/thoughts/2016/05/18/web-design-isnt-dying.html</guid>
        
        
        <category>Thoughts</category>
        
      </item>
    
  </channel>
</rss>
