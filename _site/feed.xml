<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Abbas Arezoo - Designer/Developer</title>
    <description>Hello, I&#39;m Abbas Arezoo. I design and build websites and web based applications. I&#39;m Digital Creative Manager @ Vivid.
</description>
    <link>http://www.abbasarezoo.com/</link>
    <atom:link href="http://www.abbasarezoo.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 26 Jun 2016 12:50:09 +0100</pubDate>
    <lastBuildDate>Sun, 26 Jun 2016 12:50:09 +0100</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>Using Grunt with a front-end project for the first time</title>
        <description>&lt;h2 id=&quot;before-we-start&quot;&gt;Before we start&lt;/h2&gt;

&lt;p&gt;For this guide you’ll need a code editor and a command line application. For the purposes of this article I’ll be using Terminal (Mac).&lt;/p&gt;

&lt;p&gt;Having a working knowledge of front-end development will help. It is also assumed you are familiar with Git and have used Github before.&lt;/p&gt;

&lt;h2 id=&quot;what-is-grunt&quot;&gt;What is Grunt?&lt;/h2&gt;

&lt;p&gt;Grunt is a ‘task runner’ which has thousands of plugins that can be used to automate almost any task. I use Grunt mainly for code compilation and image compression.&lt;/p&gt;

&lt;p&gt;There are other task runners available that may serve your needs better but I won’t be getting into the pro’s and con’s of the alternatives in this guide. The fact is using any task runner will increase the speed of your development dramatically.&lt;/p&gt;

&lt;p&gt;Not all projects are the same, so not all Grunt setups are be the same either. This boilerplate lays the foundations to create your own setup on a project-by-project basis.&lt;/p&gt;

&lt;h3 id=&quot;setting-up&quot;&gt;Setting up&lt;/h3&gt;

&lt;p&gt;If you’ve never used Grunt before you will need to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Install &lt;a href=&quot;http://gruntjs.com/getting-started&quot;&gt;Grunt’s command line interface&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Grunt is a command line tool that uses a only small amount of commands. If you’re unfamiliar using the command line I reckon Grunt is a nice introduction for beginners.&lt;/p&gt;

&lt;p&gt;Once you’re all setup we can fork the boilerplate from our Github repo and start automating.&lt;/p&gt;

&lt;h2 id=&quot;the-boilerplate&quot;&gt;The boilerplate&lt;/h2&gt;

&lt;h3 id=&quot;file-structure&quot;&gt;File structure&lt;/h3&gt;

&lt;p&gt;Below is an example of what my boilerplate file structure looks like. There is no magical methodology behind it. The key idea is that there should be no un-compiled files inside our build directory &lt;code class=&quot;highlighter-rouge&quot;&gt;/www&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;my_project_name
│   Gruntfile.js
│   package.json    
│   README.md
└───_css-src
    │   style.scss
    ├───modules
    │   │   _defaults.scss
    │   │   _fonts.scss
    ├───plugins
    │   │   _normalize.scss
    ├───ui
    │   │   _breakpoints.scss
    │   │   _general.scss
    │   │   _ui.scss
    │   │   _variables.scss
└───_html-src
└───_img-src
└───_js-src
└───www
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If you’re going to use your own structure and naming conventions, then you will need to edit the Gruntfile accordingly.&lt;/p&gt;

&lt;h3 id=&quot;getting-some-plugins&quot;&gt;Getting some plugins&lt;/h3&gt;

&lt;p&gt;All of the plugins that Grunt will use are stored in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/node_modules&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;You may have noticed there is no directory in the repo you forked. On an ongoing project a &lt;code class=&quot;highlighter-rouge&quot;&gt;/node_modules&lt;/code&gt; will include thousands of files, which you can store remotely if that’s how you like to work. But it’s not detrimental to the project if you don’t do this.&lt;/p&gt;

&lt;p&gt;We can run a single command in Terminal &lt;code class=&quot;highlighter-rouge&quot;&gt;npm-install&lt;/code&gt; which downloads all of the plugins we need to our local environment. Be sure to add &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; to .gitignore to make sure you don’t push to your remote repo.&lt;/p&gt;

&lt;p&gt;Once we have the plugins we’re ready to look at our Gruntfile.&lt;/p&gt;

&lt;h3 id=&quot;configuring-the-gruntfile&quot;&gt;Configuring the Gruntfile&lt;/h3&gt;

&lt;p&gt;Each Grunt project has a Gruntfile. This is a configuration file where our tasks are setup. The file should and will always be named &lt;code class=&quot;highlighter-rouge&quot;&gt;Gruntfile.js&lt;/code&gt; otherwise Grunt will error when your try to run a task.&lt;/p&gt;

&lt;p&gt;Open up the file and take a look at the basic setup. In our setup we configure each task at the top, then load the plugins and register each task at the bottom.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// TASK CONFIGURATION&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;package.son&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;sass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;sourceMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

      &lt;span class=&quot;na&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s1&quot;&gt;&#39;_css-src/styles/style.css&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;_css-src/sass/style.scss&#39;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// LOAD EACH PLUGIN&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadNpmTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;grunt-sass&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// REGISTER EACH TASK&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;exploring-and-editing-the-gruntfile&quot;&gt;Exploring and editing the Gruntfile&lt;/h4&gt;

&lt;p&gt;All the tasks are setup to run out of the box, albeit for some slight tweaking to the file itself such as changing file directories.&lt;/p&gt;

&lt;p&gt;If you’re unfamiliar with Javascript you may be overawed by the code inside the Gruntfile. However, because of the simplistic nature of how Grunt tasks are configured, a newbie should be able to navigate and edit the file without too much trouble.&lt;/p&gt;

&lt;h4 id=&quot;interpreting-a-task&quot;&gt;Interpreting a task&lt;/h4&gt;

&lt;p&gt;Most tasks share similar characteristics with slight variations depending on how the code was written by the developer who built the plugin.&lt;/p&gt;

&lt;p&gt;Each task tends to have it’s own Github repo where you can explore how the task works and is setup - there are some links below to the repo of each task included in this pack. I would recommending taking a look at the README of each plugin to get a feel for each one should be used.&lt;/p&gt;

&lt;p&gt;Familiarising yourself with the structure of tasks, running tasks, editing tasks, breaking tasks and finding out how you broke them will serve you well in your future task automation.&lt;/p&gt;

&lt;h5 id=&quot;heres-an-image-compression-task&quot;&gt;Here’s an image compression task:&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;imagemin&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;optimise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;cwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;_img-src&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;*.{png,jpg,gif,svg}&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;www/images&#39;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;This task as one target: &lt;code class=&quot;highlighter-rouge&quot;&gt;optimise&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;This looks through the current working directory (&lt;code class=&quot;highlighter-rouge&quot;&gt;cwd&lt;/code&gt;), where our uncompressed images are saved.&lt;/li&gt;
  &lt;li&gt;It then looks for source files (&lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt;) to optimise. Note in this example we’re using a wildcard (&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;) to tell the plugin to target all files in our current working directory with the file extensions of .png, .jpg, .gif and .svg&lt;/li&gt;
  &lt;li&gt;It then makes new versions of all the optimised images in the &lt;code class=&quot;highlighter-rouge&quot;&gt;www/images&lt;/code&gt; directory&lt;/li&gt;
  &lt;li&gt;If you’ve changed your directory setup you will need to change the location of the &lt;code class=&quot;highlighter-rouge&quot;&gt;cwd&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dest&lt;/code&gt; accordingly&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;another-task-example-with-a-different-structure-this-time-compiling-sass&quot;&gt;Another task example with a different structure, this time compiling Sass:&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;sass&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;sourceMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&#39;_css-src/styles/style.css&#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;_css-src/sass/style.scss&#39;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;This task is setup a little differently, with two targets &lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt; target creates a source map for the compiled CSS file (really handy). This option is currently set to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; however, which means no source map will be generated&lt;/li&gt;
  &lt;li&gt;The second target of this task dictates where the compiled CSS will be generated to and from directory it is created from&lt;/li&gt;
  &lt;li&gt;The first part shows which directory the final CSS goes. The second part shows the directory where the separate Sass files are located&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tasks-included-with-this-boilerplate&quot;&gt;Tasks included with this boilerplate&lt;/h3&gt;

&lt;h4 id=&quot;compile-css&quot;&gt;Compile CSS&lt;/h4&gt;

&lt;p&gt;Task name: &lt;strong&gt;&lt;a href=&quot;https://github.com/sindresorhus/grunt-sass&quot;&gt;grunt-sass&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Command: &lt;code class=&quot;highlighter-rouge&quot;&gt;$ grunt css&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Compiles Sass files inside the &lt;strong&gt;_css-src&lt;/strong&gt; directory to CSS files&lt;/li&gt;
  &lt;li&gt;Adds in vendor prefixes and minify CSS using posts&lt;/li&gt;
  &lt;li&gt;Compiles the resulting CSS files to a specific directory&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;compile-html&quot;&gt;Compile HTML&lt;/h4&gt;

&lt;p&gt;Task name: &lt;strong&gt;&lt;a href=&quot;https://github.com/fatso83/grunt-codekit&quot;&gt;grunt-codekit&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Command: &lt;code class=&quot;highlighter-rouge&quot;&gt;$ grunt html&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Compiles multiple HTML files inside the &lt;strong&gt;_html-src&lt;/strong&gt; directory into &lt;strong&gt;.kit&lt;/strong&gt; files&lt;/li&gt;
  &lt;li&gt;Converts &lt;strong&gt;.kit&lt;/strong&gt; files to &lt;strong&gt;.html&lt;/strong&gt; files and moves them to a specific directory&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;concatenate-javascript&quot;&gt;Concatenate Javascript&lt;/h4&gt;

&lt;p&gt;Task name: &lt;strong&gt;&lt;a href=&quot;https://github.com/gruntjs/grunt-contrib-uglify&quot;&gt;grunt-contrib-uglify&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Command: &lt;code class=&quot;highlighter-rouge&quot;&gt;$ grunt js&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Concatenates multiple Javascript files inside the &lt;strong&gt;_js-src&lt;/strong&gt; directory into a single minified file&lt;/li&gt;
  &lt;li&gt;Moves the resulting JS file to a specific directory&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;optimise-images&quot;&gt;Optimise images&lt;/h4&gt;

&lt;p&gt;Task name: &lt;strong&gt;&lt;a href=&quot;https://github.com/gruntjs/grunt-contrib-imagemin&quot;&gt;grunt-contrib-imagemin&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Command &lt;code class=&quot;highlighter-rouge&quot;&gt;$ grunt img&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Optimises all images inside the &lt;strong&gt;_img-src&lt;/strong&gt; directory&lt;/li&gt;
  &lt;li&gt;Moves the optimised images to a specific directory&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;files-hosted-on-github&quot;&gt;Files hosted on Github&lt;/h2&gt;

&lt;h3 id=&quot;handy-links&quot;&gt;Handy links&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Official Grunt website&lt;/li&gt;
  &lt;li&gt;Node.js website&lt;/li&gt;
  &lt;li&gt;Terminal for Mac&lt;/li&gt;
  &lt;li&gt;Terminal for OSX&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://24ways.org/2013/grunt-is-not-weird-and-hard/&quot;&gt;Chris Coyier’s article on Grunt is excellent&lt;/a&gt;. This is where I started, so I would highly recommend reading this first.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 02 May 2016 09:29:49 +0100</pubDate>
        <link>http://www.abbasarezoo.com/thoughts/2016/05/02/my-grunt-setup.html</link>
        <guid isPermaLink="true">http://www.abbasarezoo.com/thoughts/2016/05/02/my-grunt-setup.html</guid>
        
        
        <category>Thoughts</category>
        
      </item>
    
      <item>
        <title>Web design isn&#39;t dead, but the term is dying</title>
        <description>&lt;p&gt;When I first started designing websites, you designed and built a website and that was that. There was little thought for SEO, performance and mobile user experience. Smartphones didn’t exist. Getting online with the phones that could access the web was excruciating. Responsive web design was a long way off and big social media was in its infancy. Advances in technology allow us to solve these challenges with digital strategy, of which digital design is a part of.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.vividcreative.com/wp-content/uploads/2015/07/uos-cs4-2.jpg&quot; alt=&quot;Picture of post-it notes outlining the group of challenges that cannot be solved by design alone&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We now have a whole group of challenges that cannot be solved with design alone.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Grabbing a $50 template will get you a website, but code and images alone won’t get you over the line. Clients need the flexibility of a custom built digital product that suits their objectives, customers and content.&lt;/p&gt;

&lt;p&gt;Designers obsess over tools and scripts to make their lives easier. Over the last year we have integrated Grunt into our workflow. Grunt is great at handling a whole host of monotonous tasks. This is where automation comes into its own. Our designers and developers now have more time to refine their work knowing time isn’t against them. An average designer will sit and compress a bunch of images by hand in Photoshop. A good one gets Grunt task to do this for them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.vividcreative.com/wp-content/uploads/2015/07/automation-tools.jpg&quot; alt=&quot;Picture of popular task automation tools&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Automation tools are great. But not the only answer.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Automation isn’t contributing to web design’s downfall. We limit how much automated tools encroach on our workflow. Telling your client the website looks and acts the way it does because you let the automated web builder do the hard work might not go down too well. Unless specified early in the project, clients want a personal touch. We also like clients to have an input into how what the digital product looks like. It’s a great way to keep the client involved and engaged with the project. Strategy, rather than automated tools, inform the visual look and functionality of digital products.&lt;/p&gt;

&lt;p&gt;The art of designing a website is far from dead. But the term is dying. We like to think of it as digital design, that acts as part of a the wider digital strategy. We cannot use the term web design to describe the vast range of skills needed to create a successful website.&lt;/p&gt;

&lt;p&gt;A website isn’t just pages of code and images rendered in a browser, there’s a lot more to it than that baby.&lt;/p&gt;
</description>
        <pubDate>Fri, 18 Mar 2016 20:29:49 +0000</pubDate>
        <link>http://www.abbasarezoo.com/thoughts/2016/03/18/web-design-isnt-dying.html</link>
        <guid isPermaLink="true">http://www.abbasarezoo.com/thoughts/2016/03/18/web-design-isnt-dying.html</guid>
        
        
        <category>Thoughts</category>
        
      </item>
    
  </channel>
</rss>
