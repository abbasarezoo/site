<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Abbas Arezoo - Designer/Developer</title>
    <description>Hello, I&#39;m Abbas Arezoo. I design and build websites and web based applications. I&#39;m Digital Creative Manager @ Vivid.
</description>
    <link>http://www.abbasarezoo.com/</link>
    <atom:link href="http://www.abbasarezoo.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 01 Jul 2016 08:32:11 +0100</pubDate>
    <lastBuildDate>Fri, 01 Jul 2016 08:32:11 +0100</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Responsive images and Advanced Custom Fields</title>
        <description>&lt;p&gt;http://alistapart.com/article/responsive-images-in-practice&lt;/p&gt;

&lt;p&gt;What are responsive images&lt;/p&gt;

&lt;p&gt;The current state of responsive images - Wordpress does it out of the box in content areas… not ACF fields&lt;/p&gt;

&lt;p&gt;We can solve this by creating a handy function&lt;/p&gt;

&lt;h2 id=&quot;handy-links&quot;&gt;Handy links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/abbasarezoo/grunt-boilerplate/&quot;&gt;The Grunt boilerplate&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gruntjs.com/&quot;&gt;Official Grunt website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://24ways.org/2013/grunt-is-not-weird-and-hard/&quot;&gt;Chris Coyier’s article on Grunt is excellent&lt;/a&gt;. This is where I started learning Grunt, recommended reading.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 27 Jun 2016 09:29:49 +0100</pubDate>
        <link>http://www.abbasarezoo.com/skills/2016/06/27/responsive-images-advanced-custom-fields.html</link>
        <guid isPermaLink="true">http://www.abbasarezoo.com/skills/2016/06/27/responsive-images-advanced-custom-fields.html</guid>
        
        
        <category>Skills</category>
        
      </item>
    
      <item>
        <title>Using Grunt with a front-end project for the first time</title>
        <description>&lt;h2 id=&quot;before-we-start&quot;&gt;Before we start&lt;/h2&gt;

&lt;p&gt;Grunt is a command line tool that uses a only small amount of commands. If you’re unfamiliar using the command line, getting to grips with Grunt is a nice introduction for beginners. For this guide you’ll need a code editor and a command line application. I’ll be using Terminal (Mac) during this guide.&lt;/p&gt;

&lt;p&gt;Having a working knowledge of front-end development is a must. It is also assumed that you’re familiar with Git and have used Github before.&lt;/p&gt;

&lt;h2 id=&quot;what-is-grunt&quot;&gt;What is Grunt?&lt;/h2&gt;

&lt;p&gt;Grunt is a ‘task runner’ which has thousands of plugins that can be used to automate almost any task. There are other task runners available that may serve your needs better but I won’t be getting into the pro’s and con’s of the alternatives in this guide.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The fact is: using any task runner will dramatically increase the speed of your development.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;setting-up&quot;&gt;Setting up&lt;/h3&gt;

&lt;p&gt;If you’ve never used Grunt before you will need to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Install &lt;a href=&quot;http://gruntjs.com/getting-started&quot;&gt;Grunt’s command line interface&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you’re all setup, we can &lt;a href=&quot;https://github.com/abbasarezoo/grunt-boilerplate/&quot;&gt;fork the boilerplate&lt;/a&gt; and start getting to know Grunt.&lt;/p&gt;

&lt;h2 id=&quot;getting-some-plugins&quot;&gt;Getting some plugins&lt;/h2&gt;

&lt;p&gt;All of the plugins that we’re going to use will be stored in a directory named &lt;em&gt;node_modules&lt;/em&gt;. But, you may have noticed there is no such directory in the repo you forked. In all Grunt projects a &lt;em&gt;node_modules&lt;/em&gt; will include thousands of files, I don’t see the point in pushing these files to a remote repo.&lt;/p&gt;

&lt;h3 id=&quot;npm-install&quot;&gt;npm-install&lt;/h3&gt;

&lt;p&gt;You will also see a &lt;em&gt;package.json&lt;/em&gt; file which contains the name of the project and a list of plugins we will be using. If you’re &lt;em&gt;package.json&lt;/em&gt; file has a pre-populated list of plugins (like in this guide) you can simply run the command &lt;code class=&quot;highlighter-rouge&quot;&gt;$ npm install&lt;/code&gt; to download them to your local environment. Running this command creates the &lt;em&gt;node_modules&lt;/em&gt; directory locally and the directories for each plugin within.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Any additional plugins you add to your project will update this file so you can leave this file alone from now on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once we have the plugins we’re ready to look at our Gruntfile and configure some tasks.&lt;/p&gt;

&lt;h2 id=&quot;getting-to-know-your-gruntfile&quot;&gt;Getting to know your Gruntfile&lt;/h2&gt;

&lt;p&gt;Each Grunt project has a Gruntfile. This is a configuration file where our tasks are setup. The file should and will always be named &lt;em&gt;Gruntfile.js&lt;/em&gt; otherwise Grunt will error when your try to run a task.&lt;/p&gt;

&lt;p&gt;Open up the file and take a look at the basic setup. In our file plugins are loaded at the top, tasks configured in the middle and registered at the bottom.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// LOAD EACH PLUGIN&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadNpmTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;grunt-sass&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// TASK CONFIGURATION&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;package.son&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;sass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;sourceMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

      &lt;span class=&quot;na&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;: &#39;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_css&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scss&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;
        }
      }

    },

});

// REGISTER EACH TASK

grunt.registerTask(&#39;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;interpreting-a-task&quot;&gt;Interpreting a task&lt;/h3&gt;

&lt;p&gt;Most tasks share similar characteristics with slight variations depending on how the code was written by the developer who built the plugin.&lt;/p&gt;

&lt;p&gt;Each task tends to have it’s own Github repo where you can explore how the task works and setup, &lt;a href=&quot;https://github.com/gruntjs/grunt-contrib-uglify&quot;&gt;here’s one&lt;/a&gt;. I would recommend taking a look at the &lt;em&gt;README.md&lt;/em&gt; of each plugin to get a feel for each one should be used.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Running tasks, editing tasks, breaking tasks and fixing them will serve you well in your Grunt-based future.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;heres-an-example-image-optimisation-task&quot;&gt;Here’s an example image optimisation task:&lt;/h4&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;imagemin&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;optimise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;cwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;_img-src&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;*.{png,jpg,gif,svg}&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;build/images&#39;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;This task as one target: &lt;code class=&quot;highlighter-rouge&quot;&gt;optimise&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;This looks through the current working directory (&lt;code class=&quot;highlighter-rouge&quot;&gt;cwd&lt;/code&gt;), where our uncompressed images are saved.&lt;/li&gt;
  &lt;li&gt;It then looks for source files (&lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt;) to optimise. Note in this example we’re using a wildcard (&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;) to tell the plugin to target all files in our current working directory with the file extensions of &lt;em&gt;.png&lt;/em&gt;, &lt;em&gt;.jpg&lt;/em&gt;, &lt;em&gt;.gif&lt;/em&gt; and &lt;em&gt;.svg&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;It then makes new versions of all the optimised images in the &lt;em&gt;build/images&lt;/em&gt; directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;another-task-example-with-a-different-structure-this-time-compiling-sass&quot;&gt;Another task example with a different structure, this time compiling Sass:&lt;/h4&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;sass&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;sourceMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;: &#39;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_css&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scss&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;This task is setup a little differently, with two targets &lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt; target creates a source map for the compiled CSS file (really handy). This option is currently set to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; however, which means no source map will be generated.&lt;/li&gt;
  &lt;li&gt;The second target of this task dictates where the compiled CSS will be generated to and from directory it is created from.&lt;/li&gt;
  &lt;li&gt;The first part shows which directory the final CSS goes. The second part shows the directory where the separate Sass files are located.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;running-tasks&quot;&gt;Running tasks&lt;/h2&gt;

&lt;p&gt;Now you’ve got to know Grunt it’s time to head back to Terminal and start writing some commands.&lt;/p&gt;

&lt;h3 id=&quot;tasks-included-with-this-boilerplate&quot;&gt;Tasks included with this boilerplate&lt;/h3&gt;

&lt;h4 id=&quot;compile-css&quot;&gt;Compile CSS&lt;/h4&gt;

&lt;p&gt;Task name: &lt;em&gt;&lt;a href=&quot;https://github.com/sindresorhus/grunt-sass&quot;&gt;grunt-sass&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Command: &lt;code class=&quot;highlighter-rouge&quot;&gt;$ grunt css&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Compiles Sass files inside the &lt;em&gt;_css-src&lt;/em&gt; directory to CSS files&lt;/li&gt;
  &lt;li&gt;Adds in vendor prefixes and minify CSS using posts&lt;/li&gt;
  &lt;li&gt;Compiles the resulting CSS files to a specific directory&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;compile-html&quot;&gt;Compile HTML&lt;/h4&gt;

&lt;p&gt;Task name: &lt;em&gt;&lt;a href=&quot;https://github.com/fatso83/grunt-codekit&quot;&gt;grunt-codekit&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Command: &lt;code class=&quot;highlighter-rouge&quot;&gt;$ grunt html&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Compiles multiple HTML files inside the &lt;em&gt;_html-src&lt;/em&gt; directory into &lt;em&gt;.kit&lt;/em&gt; files&lt;/li&gt;
  &lt;li&gt;Converts &lt;em&gt;.kit&lt;/em&gt; files to &lt;em&gt;.html&lt;/em&gt; files and moves them to a specific directory&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;concatenate-javascript&quot;&gt;Concatenate Javascript&lt;/h4&gt;

&lt;p&gt;Task name: &lt;em&gt;&lt;a href=&quot;https://github.com/gruntjs/grunt-contrib-uglify&quot;&gt;grunt-contrib-uglify&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Command: &lt;code class=&quot;highlighter-rouge&quot;&gt;$ grunt js&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Concatenates multiple Javascript files inside the &lt;em&gt;_js-src&lt;/em&gt; directory into a single minified file&lt;/li&gt;
  &lt;li&gt;Moves the resulting JS file to a specific directory&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;optimise-images&quot;&gt;Optimise images&lt;/h4&gt;

&lt;p&gt;Task name: &lt;em&gt;&lt;a href=&quot;https://github.com/gruntjs/grunt-contrib-imagemin&quot;&gt;grunt-contrib-imagemin&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Command &lt;code class=&quot;highlighter-rouge&quot;&gt;$ grunt img&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Optimises all images inside the &lt;em&gt;_img-src&lt;/em&gt; directory&lt;/li&gt;
  &lt;li&gt;Moves the optimised images to a specific directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you have the ability to run individual tasks your development time will be noticeably quicker. But we can take our newly found knowledge of Grunt a step further.&lt;/p&gt;

&lt;h2 id=&quot;automate-the-automation&quot;&gt;Automate the automation&lt;/h2&gt;

&lt;p&gt;Using Terminal to run individual tasks is a great way to learn Grunt, but this isn’t an efficient way of working on a live project. We can take our automation to the next level and we can do this using the &lt;em&gt;grunt-watch&lt;/em&gt; task.&lt;/p&gt;

&lt;p&gt;This task watches a directory and runs specified sub-tasks when additions and changes are made to files within that directory.&lt;/p&gt;

&lt;p&gt;The great thing about about &lt;em&gt;grunt-watch&lt;/em&gt; is you run the command once and leave it to work its magic in the background while you go about your work.&lt;/p&gt;

&lt;h5 id=&quot;heres-an-example-grunt-watch-task&quot;&gt;Here’s an example grunt-watch task:&lt;/h5&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;_css-src/**/*.scss&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;css&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nl&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;livereload&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35729&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;added&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;changed&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;In this example there is a sub-task called &lt;code class=&quot;highlighter-rouge&quot;&gt;css&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;This sub-task watches the &lt;em&gt;_css-src&lt;/em&gt; directory and all files within with the file extension &lt;em&gt;.scss&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;If you refer to the area in the Gruntfile where tasks are registered you’ll see&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will notice in our Gruntfile a number of sub-tasks within our &lt;em&gt;watch&lt;/em&gt; task. Take some time to familiarise yourself with how sub-tasks are written and how the link with other tasks in the same Gruntfile.&lt;/p&gt;

&lt;p&gt;To run the &lt;em&gt;watch&lt;/em&gt; task simply run &lt;code class=&quot;highlighter-rouge&quot;&gt;$ grunt watch&lt;/code&gt; and you’re good to go.&lt;/p&gt;

&lt;h2 id=&quot;finishing-up&quot;&gt;Finishing up&lt;/h2&gt;

&lt;p&gt;While this guide is a super-simple introduction to Grunt, it is a great jumping off point for bigger and better things. My advice would be to get to grips with some basic tasks first, then start experimenting with some of the more complex tasks once you’re comfortable.&lt;/p&gt;

&lt;p&gt;But using the simpler tasks that we have used in this guide should make your life a whole lot better.&lt;/p&gt;

&lt;h2 id=&quot;handy-links&quot;&gt;Handy links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/abbasarezoo/grunt-boilerplate/&quot;&gt;The Grunt boilerplate&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gruntjs.com/&quot;&gt;Official Grunt website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://24ways.org/2013/grunt-is-not-weird-and-hard/&quot;&gt;Chris Coyier’s article on Grunt is excellent&lt;/a&gt;. This is where I started learning Grunt, recommended reading.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 21 Jun 2016 09:29:49 +0100</pubDate>
        <link>http://www.abbasarezoo.com/skills/2016/06/21/using-grunt-for-the-first-time.html</link>
        <guid isPermaLink="true">http://www.abbasarezoo.com/skills/2016/06/21/using-grunt-for-the-first-time.html</guid>
        
        
        <category>Skills</category>
        
      </item>
    
      <item>
        <title>Web design isn&#39;t dead, but the term is dying</title>
        <description>&lt;p&gt;When I first started designing websites, you designed and built a website and that was that. There was little thought for SEO, performance and mobile user experience. Smartphones didn’t exist. Getting online with the phones that could access the web was excruciating. Responsive web design was a long way off and big social media was in its infancy. Advances in technology allow us to solve these challenges with digital strategy, of which digital design is a part of.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.vividcreative.com/wp-content/uploads/2015/07/uos-cs4-2.jpg&quot; alt=&quot;Picture of post-it notes outlining the group of challenges that cannot be solved by design alone&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We now have a whole group of challenges that cannot be solved with design alone.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Grabbing a $50 template will get you a website, but code and images alone won’t get you over the line. Clients need the flexibility of a custom built digital product that suits their objectives, customers and content.&lt;/p&gt;

&lt;p&gt;Designers obsess over tools and scripts to make their lives easier. Over the last year we have integrated Grunt into our workflow. Grunt is great at handling a whole host of monotonous tasks. This is where automation comes into its own. Our designers and developers now have more time to refine their work knowing time isn’t against them. An average designer will sit and compress a bunch of images by hand in Photoshop. A good one gets Grunt task to do this for them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.vividcreative.com/wp-content/uploads/2015/07/automation-tools.jpg&quot; alt=&quot;Picture of popular task automation tools&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Automation tools are great. But not the only answer.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Automation isn’t contributing to web design’s downfall. We limit how much automated tools encroach on our workflow. Telling your client the website looks and acts the way it does because you let the automated web builder do the hard work might not go down too well. Unless specified early in the project, clients want a personal touch. We also like clients to have an input into how what the digital product looks like. It’s a great way to keep the client involved and engaged with the project. Strategy, rather than automated tools, inform the visual look and functionality of digital products.&lt;/p&gt;

&lt;p&gt;The art of designing a website is far from dead. But the term is dying. We like to think of it as digital design, that acts as part of a the wider digital strategy. We cannot use the term web design to describe the vast range of skills needed to create a successful website.&lt;/p&gt;

&lt;p&gt;A website isn’t just pages of code and images rendered in a browser, there’s a lot more to it than that baby.&lt;/p&gt;
</description>
        <pubDate>Wed, 18 May 2016 21:29:49 +0100</pubDate>
        <link>http://www.abbasarezoo.com/thoughts/2016/05/18/web-design-isnt-dying.html</link>
        <guid isPermaLink="true">http://www.abbasarezoo.com/thoughts/2016/05/18/web-design-isnt-dying.html</guid>
        
        
        <category>Thoughts</category>
        
      </item>
    
  </channel>
</rss>
